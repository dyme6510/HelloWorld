
!src <6502/std.a>
!src <cbm/c64/cia1.a>
!src <cbm/c64/cia2.a>
!src <cbm/c64/vic.a>

!cpu 6510

!src "fireblur_common.a"

*=$1000


.cViewportMinX = -32        ; DX darf nicht kleiner sein als <cViewportMinX
.cViewportMaxX = 360        ; DX darf nicht größer sein als <cViewportMaxX

.zpMoveDX = $FC
.zpMoveDY = $FD

;; y: last SpriteFrame, x: next SpriteFrame
MoveXY:
    clc

.MoveYStart:
    lda .zpMoveDY           ; 4
    bmi .MoveYSub           ; 2/3
.MoveYAdd:
    adc pSpriteYPos,y       ; 4
    bcc .MoveYEnd           ; 3/2
.MoveDisableSprite:
    lda #$FF                ; 2
    sta pSpriteYPos,x       ; 5
    rts                     ; 6     __Y:25/27
.MoveYSub:
    adc pSpriteYPos,y       ; 4   
    bcc .MoveDisableSprite  ; 2/3
    clc                     ; 2
.MoveYEnd:              
    sta pSpriteYPos,x       ; 5     __16/20
    
.MoveXStart:
    lda .zpMoveDX               ; 3
    bmi .MoveXSub               ; 2/3    
.MoveXAdd:                          ; _5
    adc pSpriteXPos,y           ; 4
    sta pSpriteXPos,x           ; 5
    lda pSpriteXPosHi,y         ; 4
    adc #0                      ; 2
    sta pSpriteXPosHi,x         ; 5
    cmp #1                      ; 2
    bne .MoveXEnd               ; 2/3
.MoveXClipHi:
    lda pSpriteXPos,x           ; 4
    cmp #<.cViewportMaxX        ; 2
    bcc .MoveXEnd               ; 2/3
    bcs .MoveDisableSprite      ; 2/3        
.MoveXSub:                          ; _6
    adc pSpriteXPos,y           ; 4
    sta pSpriteXPos,x           ; 5
    lda pSpriteXPosHi,y         ; 4
    adc #$FF                    ; 2
    sta pSpriteXPosHi,x         ; 5
    cmp #$FF                    ; 2
    bne .MoveXEnd               ; 2/3
.MoveXClipLo:    
    lda #<.cViewportMinX        ; 2
    cmp pSpriteXPos,x           ; 4
    bcs .MoveDisableSprite      ; 3
.MoveXEnd:                      ; __30/31/39/39
    
    
    rts                         ; 6



    
.StayXY:
    clc
    txa
    adc #$E0
    tay
    lda pSpriteYPos,y
    sta pSpriteYPos,x
    lda pSpriteXPos,y
    sta pSpriteXPos,x
    lda pSpriteXPosHi,y
    sta pSpriteXPosHi,x
    lda pSpriteCFlag,y
    sta pSpriteCFlag,x
    lda pSpriteBitmap,y
    sta pSpriteBitmap,x
    rts


    
Animate:
    ldx #cMaxSprite
.AnimateNextSprite
    dex
.AnimateSpriteX:
    lda pSpriteAnimationIndex,x
    beq .AnimateNextSprite
    stx .vAnimateSpriteRestoreX

    
    ;; X,Y: Pointer auf Diff-Tabelle (16Bit?) oder 00, von da an mit Offset = FrameCount
    ;; C: Pointer auf Farb-Animations-Tabelle (16Bit?)oder 00, von da an mit Offset = FrameCount/3
    
    
    
    
    
    
    
.vAnimateSpriteRestoreX = *+1
    ldx #0
    bne .AnimateNextSprite
    rts
    

    
;; Animation Keyframe:
;; XX YY FLAGS:Exp,Fire,Del,??,Color

;; Animation State:
;; XTabLo, XTabHi, dxConst, YTabLo, YTabHi, dyConst, NextCmd#, Duration

    ;; entweder Tabelle Oder Konstante?
.AnimateCalcX:
    lda .pAnimateDXConst,x
    ldy .pAnimateXTabHi,x
    beq .AnimateXNoTable
    sty .AnimateXFetchTable+2
    ldy .pAnimateXTabLo,x
.AnimateXFetchTable:    
    adc $FF00,x
    clc
.AnimateXNoTable:
    sta .vMoveDX

.AnimateCalcY:    
    lda .pAnimateDYConst,x
    ldy .pAnimateYTabHi,x
    beq .AnimateYNoTable
    sty .AnimateYFetchTable+2
    ldy .pAnimateYTabLo,x
.AnimateYFetchTable:    
    adc $FF00,x
    clc
.AnimateYNoTable:
    sta .vMoveDY
    
    
    
;; Command:
;; Flags (SetXTab, SetXConst, SetYTab, SetYConst, FlagCmd), XTabLo, XTabHi, YTabLo, YTabHi, Flags, Delay, NextCmd#

;; Spawn Sprite:
;; Char#, Command#, Xlo, Xhi, Y, InitialFlags

;; ODER:
.pCmd00 : !byte cCmdXTab | cCmdXOff,    <pCmdXTabSin, >pCmdXTabSin, -3 
.pCmd01 : !byte cCmdYTab | cCmdYOff,    <pCmdYTabSin, >pCmdYTabSin, 0
.pCmd02 : !byte cCmdFlags,              cSpriteCFlagColor, cSpriteCFlagColor & $04

.pCmdPtrHi : !byte >.pCmd00, >.pCmd01, >.pCmd02
.pCmdPtrLo : !byte <.pCmd00, <.pCmd01, <.pCmd02
.pCmdWait  : !byte <.pCmd00, <.pCmd01, <.pCmd02
.pCmdNext  : !byte 1, 2, 0

;; x: command#, y: actor#
AnimateParseCmd:
    stx .pActorCmd,y
    lda .pCmdPtrHi,x
    sta .AnimateParseCmdFetch + 2
    lda .pCmdPtrLo,x
    sta .AnimateParseCmdFetch + 1

.AnimateParseCmdFetch:
    lda $FFFF,x
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
32,33,34,34,35,36,37,37,
38,39,40,41,41,42,43,44,
44,45,46,46,47,48,48,49,
50,50,51,52,52,53,53,54,
55,55,56,56,57,57,58,58,
59,59,59,60,60,61,61,61,
62,62,62,62,63,63,63,63,
63,64,64,64,64,64,64,64,
64,64,64,64,64,64,64,64,
63,63,63,63,63,62,62,62,
62,61,61,61,60,60,59,59,
59,58,58,57,57,56,56,55,
55,54,53,53,52,52,51,50,
50,49,48,48,47,46,46,45,
44,44,43,42,41,41,40,39,
38,37,37,36,35,34,34,33,
32,31,30,30,29,28,27,27,
26,25,24,23,23,22,21,20,
20,19,18,18,17,16,16,15,
14,14,13,12,12,11,11,10,
9,9,8,8,7,7,6,6,
5,5,5,4,4,3,3,3,
2,2,2,2,1,1,1,1,
1,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,2,2,2,
2,3,3,3,4,4,5,5,
5,6,6,7,7,8,8,9,
9,10,11,11,12,12,13,14,
14,15,16,16,17,18,18,19,
20,20,21,22,23,23,24,25,
26,27,27,28,29,30,30,31,



32,35,38,41,44,47,50,52,
55,57,59,60,62,63,63,64,
64,64,63,63,62,60,59,57,
55,52,50,47,44,41,38,35,
32,29,26,23,20,17,14,12,
9,7,5,4,2,1,1,0,
0,0,1,1,2,4,5,7,
9,12,14,17,20,23,26,29,


pSinDiffAmp64Len64:
!byte  3, 3, 3, 3, 3, 3, 2, 3, 2, 2, 1, 2, 1, 0, 1, 0, 0,-1, 0,-1,-2,-1,-2,-2,-3,-2,-3,-3,-3,-3,-3,-3
!byte -3,-3,-3,-3,-3,-3,-2,-3,-2,-2,-1,-2,-1, 0,-1, 0, 0, 1, 0, 1, 2, 1, 2, 2, 3, 2, 3, 3, 3, 3, 3, 3    
    
    
    


    